{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","alt","src","CardList","robots","colorChange","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","useState","setRobots","searchfield","setSearchfield","on","setOn","useEffect","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","onClick","event","target","value","ReactDOM","render","document","getElementById"],"mappings":"8LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,eCSCQ,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE5B,OACQ,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,KAC/C,gCACI,6BAAKF,IACL,4BAAIC,WCYLK,EAnBE,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,YAE3B,OACA,8BAEOD,EAAOE,KAAK,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEAX,KAAQO,EAAOI,GAAGX,KAClBC,MAASM,EAAOI,GAAGV,MACnBC,GAAMK,EAAOI,GAAGT,GAChBM,YAAeA,GAJRG,SCKRC,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKV,UAAW,MAAhB,SACI,uBACIA,UAAY,mCACZW,KAAK,SACLC,YAAY,gBACZC,SAAYH,OCAbI,EAPA,SAACC,GACZ,OACG,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGJ,EAAMK,Y,MCkDDC,MAjDf,WAAiB,IAAD,EAGgBC,mBAAS,IAHzB,mBAGLlB,EAHK,KAGGmB,EAHH,OAI0BD,mBAAS,IAJnC,mBAILE,EAJK,KAIQC,EAJR,OAKQH,oBAAS,GALjB,mBAKLI,EALK,KAKDC,EALC,KAQZC,qBAAU,WACNC,MAAM,8CACDvC,MAAK,SAAAwC,GAAQ,OAAGA,EAASC,UACzBzC,MAAK,SAAA0C,GAAK,OAAIT,EAAUS,QAC/B,IAEF,IAOMC,EAAiB7B,EAAO8B,QAAO,SAAAC,GACjC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASb,EAAYY,kBAErD,OAAsB,IAAlBhC,EAAOkC,OACA,yCAIP,qBAAKtC,UAAW,KAAhB,SACI,uBAAMA,UAAa0B,EAAK,eAAiB,iBAAzC,UACI,wBAAQ1B,UAAU,gBAAgBuC,QAb9B,kBAAMZ,GAAM,SAAAD,GAAE,OAAKA,QAcvB,oBAAI1B,UAAY,KAAhB,yBACA,cAAC,EAAD,CAAWU,aAnBJ,SAAC8B,GACrBf,EAAee,EAAMC,OAAOC,UAmBf,cAAC,EAAD,UACI,cAAC,EAAD,CACAtC,OAAQ6B,YCnChCU,IAASC,OACT,cAAC,EAAD,IAAQC,SAASC,eAAe,SAMhC3D,M","file":"static/js/main.7c1de37e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\n\nconst Card = ({name, email, id}) => {\n\nreturn (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Card;\n\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots, colorChange}) => {\n   \nreturn (\n<div>\n    {\n       robots.map ((user, i) => {\n            return (\n                <Card \n                key = {i} \n                name = {robots[i].name} \n                email = {robots[i].email} \n                id = {robots[i].id}\n                colorChange = {colorChange}\n                />\n            );\n        })              \n    }\n</div>\n)}\nexport default CardList; \n\n// Cards Array","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className= 'pa2'>\n            <input \n                className = 'pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots' \n                onChange = {searchChange}\n\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;\n\n\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n       <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n         {props.children}  \n       </div> \n    );\n};\nexport default Scroll;","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nfunction App () {\n   \n\n    const [robots, setRobots] = useState([])\n    const [searchfield, setSearchfield] = useState('')\n    const [on, setOn] = useState(false)\n    \n    \n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response=> response.json())\n            .then(users => setRobots(users));\n    },[])\n\n    const onSearchChange = (event) => {\n       setSearchfield(event.target.value)\n    }\n\n    const changeColor = () => setOn(on => !on);\n\n\n    const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        if (robots.length === 0) {\n            return <h1>Loading</h1>\n          }\n        else {\n            return (   \n            <div className ='tc'>\n                <body className = {on ? \"color-change\" : \"original-color\"}>\n                    <button className='pa3 bg-yellow' onClick = {changeColor}></button>\n                    <h1 className = 'f1'>RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <CardList \n                        robots={filteredRobots}\n                            />\n                    </Scroll>\n                </body>\n             </div>\n            );\n        }\n    }\n\n\n  \n\n    \nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n<App/>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals() "],"sourceRoot":""}